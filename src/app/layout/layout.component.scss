$component-count: (
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9
) !default;

// %cx-layout-horizontal {
//   border: 2px dashed red;
// }

// %child {
//   @extend %cx-layout-horizontal;
// }

// @mixin test {
//   @extend %cx-layout-horizontal;
// }

// .real-child {
//   @extend %child;
// }
// .test-class {
//   @media (max-width: 1000px) {
//     @include test();
//   }
// }

.cx-layout-horizontal {
  display: flex;
  flex-wrap: wrap;
  & > * {
    flex-grow: 1;
    flex-shrink: 1;
  }
}

@each $cmp_count in map-values($map: $component-count) {
  .cx-layout-#{$cmp_count}-horizontal-components {
    @extend .cx-layout-horizontal;

    & > * {
      flex-basis: unquote((100 / $cmp_count) + '%');
      max-width: unquote((100 / $cmp_count) + '%');
    }
  }
}

//.cx-layout-4-horizontal-components-md
// work on SPA github
// responsive classes
// test in home page for example
// generic layout rules for the header - try to emulate
// class for page break/new row
// checkout smart layout wiki

.cx-layout2 {
  display: flex;
  flex-direction: column;
}
.cx-layout3 {
}
.cx-layout4 {
}
.cx-layout5 {
}

//------------------------

.layour-wrapper {
  margin: 20px 0;
  max-width: 50%;
  border: 3px dashed lightcyan;
}

.image {
  height: 400px;
}

.image1 {
  background-image: url('https://placeimg.com/1200/400/arch');
}
.image2 {
  background-image: url('https://placeimg.com/1200/400/tech');
}
.image3 {
  background-image: url('https://placeimg.com/1200/400/nature');
}
.image4 {
  background-image: url('https://placeimg.com/1200/400/animals');
}
.image5 {
  background-image: url('https://placeimg.com/1200/400/people');
}
.image6 {
  background-image: url('https://placeimg.com/1200/400/nature/sepia');
}
.image7 {
  background-image: url('https://placeimg.com/2000/400/animals/grayscale');
}
.image8 {
  background-image: url('https://placeimg.com/2000/400/tech/sepia');
}
.image9 {
  background-image: url('https://placeimg.com/2000/400/people/sepia');
}

// delete after testing
$breakpoints: (
  'small': 600px,
  'medium': 900px,
  'large': 1200px
);
$default-breakpoint: root;
$current-breakpoint-low: $default-breakpoint;
$current-breakpoint-up: $default-breakpoint;

// Caching existing placeholders
// Not meant to be manually edited
$placeholders: ();

@mixin breakpoint($lower, $upper) {
  $lower-value: cx-breakpoint-min($lower, $breakpoints);
  $upper-value: cx-breakpoint-max($upper, $breakpoints);

  @warn ">>>>>--->>>>>>`#{$lower-value}`";
  @if $lower-value != null and $upper-value != null {
    $current-breakpoint-up: $upper-value !global;
    $current-breakpoint-low: $lower-value !global;
    @media (min-width: $lower-value) and (max-width: $upper-value) {
      @content;
    }
    $current-breakpoint-up: $default-breakpoint !global;
    $current-breakpoint-low: $default-breakpoint !global;
  } @else if $upper-value == null {
    $current-breakpoint-low: $lower-value !global;
    @media (min-width: $lower-value) {
      @content;
    }
    $current-breakpoint-low: $default-breakpoint !global;
  } @else if $lower-value == null {
    $current-breakpoint-up: $upper-value !global;
    @media (max-width: $upper-value) {
      @content;
    }
    $current-breakpoint-low: $default-breakpoint !global;
  }
}

@mixin placeholder($name) {
  @if not index($placeholders, $name) {
    $placeholders: append($placeholders, $name) !global;

    @at-root {
      @each $breakpoint, $value in $breakpoints {
        @media (min-width: $value) {
          %#{$name}-#{$breakpoint} {
            @content;
          }
        }
      }

      %#{$name}-#{$default-breakpoint} {
        @content;
      }
    }
  }
}

@mixin _($name) {
  @warn "-------->>>`#{$current-breakpoint-up}`";
  @extend %#{$name}-#{$current-breakpoint-up} !optional;
  @extend %#{$name}-#{$current-breakpoint-low} !optional;
}

@include placeholder('cx-layout-3') {
  border: 3px dashed pink;
}
@include placeholder('cx-layout-2') {
  border: 3px dashed blue;
}
@include placeholder('cx-layout-4') {
  border: 3px dashed black;
}
@include placeholder('cx-layout-1') {
  border: 3px dashed yellow;
}

.c {
  @include breakpoint(small, small) {
    @include _(cx-layout-3);
  }

  @include breakpoint(medium, medium) {
    @include _(cx-layout-1);
  }
  @include breakpoint(large, large) {
    @include _(cx-layout-2);
  }
}

@mixin cx-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  //temporary delegate to bootstrap
  @include media-breakpoint-up($name, $breakpoints) {
    @content;
  }
}
@mixin cx-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  //temporary delegate to bootstrap
  @include media-breakpoint-down($name, $breakpoints) {
    @content;
  }
}

@function cx-breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  //temporary delegate to bootstrap
  @return media-breakpoint-next($name, $breakpoints, $breakpoint-names);
}

@function cx-breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  //temporary delegate to bootstrap
  @return media-breakpoint-min($name, $breakpoints);
}

@function cx-breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  //temporary delegate to bootstrap
  @return media-breakpoint-max($name, $breakpoints);
}

@mixin cx-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-between($lower, $upper, $breakpoints) {
    @content;
  }
}
